using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libblosc"], :libblosc),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/stevengj/BloscBuilder/releases/download/v1.14.2+4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/Blosc.aarch64-linux-gnu.tar.gz", "350b0f16e02400d606e1239875ee7cb298bdf6e3b6f805802175f4c0b1562337"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Blosc.arm-linux-gnueabihf.tar.gz", "f06362c895322ae793374db72dbec59551a1c1ea3337fac6582707c98872ae0e"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/Blosc.i686-linux-gnu.tar.gz", "69e56fd4b27517e2c292cd5594c7e4c9e8bd6c112b023eccd3021809ee1db4ac"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.i686-w64-mingw32.tar.gz", "c85ccfc2464f597acdc2373a72dc886b0a36c910ed11a4a8d8e0909bed31f419"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/Blosc.powerpc64le-linux-gnu.tar.gz", "c40332140728aed7bdaa38093e7e5250c53f4f05f85e77a6482acc700455e1f9"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-apple-darwin14.tar.gz", "ada315884abbdaca2a6fd390134902d42a90060773182ff5aa834c221dbb591f"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-linux-gnu.tar.gz", "1ffe1b3d67cbb0b1547c7feb17081673398b715400ae9ad3c6e8be9ecfc347b3"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-w64-mingw32.tar.gz", "bfd2f24920df7671a51f5dbfe481c754465acbf38895af0e9874bfe717d0df97"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
