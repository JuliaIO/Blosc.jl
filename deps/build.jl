using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libblosc"], :libblosc),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/stevengj/BloscBuilder/releases/download/v1.14.2+5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/Blosc.aarch64-linux-gnu.tar.gz", "2581321c867036d16953ec4c82fed3738c62ae4db19e69c6f7b0a4a0f2d98e7a"),
    BinaryProvider.Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Blosc.arm-linux-gnueabihf.tar.gz", "efa2f62514ee50c34d994f9850f68a18c6ce1e03e2d282c18a098d13538f4ff3"),
    BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/Blosc.i686-linux-gnu.tar.gz", "144e7fe1d782a04b84f194d96eebead709c6d52cd584e21e4c8a6c7759c6b23f"),
    BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.i686-w64-mingw32.tar.gz", "efcf19ba037e1473ccfcc0a2ebc71067ae4fc73a70b12dcb63179bc3a99c6885"),
    BinaryProvider.Linux(:powerpc64le, :glibc, :blank_abi) => ("$bin_prefix/Blosc.powerpc64le-linux-gnu.tar.gz", "92952db840c1b5db9bc8424a7c31f01531ece8a5fff0f79838f3b9274156b54e"),
    BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-apple-darwin14.tar.gz", "e3906dc58326a679e108e2339fa5c6ceb037c3efd28229fcfc19574f8f1e6f04"),
    BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-linux-gnu.tar.gz", "bd8d922e9e903e4433551925283fe0a9418389eec0706405123ed9a1a42c9415"),
    BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Blosc.x86_64-w64-mingw32.tar.gz", "d7e8891a15e1b1cb0a3b761ed14ba5c7ecf82dca706053f68da3dae8af5ea2f6"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
