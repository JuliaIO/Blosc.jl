using BinaryProvider # requires BinaryProvider 0.3.0 or later
include("compile.jl")

# env var to force compilation from source, for testing purposes
const forcecompile = get(ENV, "FORCE_COMPILE_BLOSC", "no") == "yes"

# Parse some basic command-line arguments
const verbose = ("--verbose" in ARGS) || forcecompile
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libblosc"], :libblosc),
]
verbose && forcecompile && Compat.@info("Forcing compilation from source.")

# Download binaries from hosted location
bin_prefix = "https://github.com/stevengj/BloscBuilder/releases/download/v1.14.3+4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Blosc.v1.0.0.aarch64-linux-gnu.tar.gz", "8465f46eb7e8e199d30345da362691168234633bd59f99eeccddc287e22a3c6f"),
    Linux(:aarch64, :musl) => ("$bin_prefix/Blosc.v1.0.0.aarch64-linux-musl.tar.gz", "2d6a145a23356abef40570a4d1df5d1474f4580bf1d2c7dff1f9bf80f407f391"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Blosc.v1.0.0.arm-linux-gnueabihf.tar.gz", "e37cb34d4a818f5441958e2249f8adc2b280a5b4dc401a6301d7db8d0ebba724"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/Blosc.v1.0.0.arm-linux-musleabihf.tar.gz", "12c0d4a254ebfac882784669091ef0fd74c8276086918d0dc2bd1ee4ab7b3bd1"),
    Linux(:i686, :glibc) => ("$bin_prefix/Blosc.v1.0.0.i686-linux-gnu.tar.gz", "57321d35f2f675a9cad056103375079473b5ef8651a3c83082290387f141ce75"),
    Linux(:i686, :musl) => ("$bin_prefix/Blosc.v1.0.0.i686-linux-musl.tar.gz", "f4d847aad86257a5c53970e5ce14853f2dc4ca4ba6c69ec69e63c89ec6ce77d7"),
    Windows(:i686) => ("$bin_prefix/Blosc.v1.0.0.i686-w64-mingw32.tar.gz", "dd757f92c8be2b2a143d58e119f12e509a48bd206b42b3e928752ed2ba759de5"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Blosc.v1.0.0.powerpc64le-linux-gnu.tar.gz", "cf11a5fdf651d8614819c5fa2ff9cd8cad7ddd9ae1d96646fd9059f6d05f65b9"),
    MacOS(:x86_64) => ("$bin_prefix/Blosc.v1.0.0.x86_64-apple-darwin14.tar.gz", "8ed5d777dc81c281218faefe62f6ff3b61a983e21eab8b70a47a57338297ca8e"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Blosc.v1.0.0.x86_64-linux-gnu.tar.gz", "65344a2dbf3f778e361eec635c2ed247882fffafaa5abd0ca5dd1d9593be2210"),
    Linux(:x86_64, :musl) => ("$bin_prefix/Blosc.v1.0.0.x86_64-linux-musl.tar.gz", "73c378b2c1bbc1ae745e740e5e0c66b6ae90b42cb5fc6430cea8f8e90a68a36e"),
    FreeBSD(:x86_64) => ("$bin_prefix/Blosc.v1.0.0.x86_64-unknown-freebsd11.1.tar.gz", "c4f9447ff20eeba8373eccef01099ccbe926f0343d31a494b431b28ac4e6274a"),
    Windows(:x86_64) => ("$bin_prefix/Blosc.v1.0.0.x86_64-w64-mingw32.tar.gz", "72649ea452a07eb9658671f99e3dafe8ad7fec3b6f2461487e7f56e1f5e2e2b0"),
)

# source code tarball and hash for fallback compilation
source_url = "https://github.com/Blosc/c-blosc/archive/v1.14.3.tar.gz"
source_hash = "7217659d8ef383999d90207a98c9a2555f7b46e10fa7d21ab5a1f92c861d18f7"

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key()) && !forcecompile
    url, tarball_hash = download_info[platform_key()]
    if !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)

        # check again whether the dependency is satisfied, which
        # may not be true if dlopen fails due to a libc++ incompatibility (#50)
        unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
    end
end

if unsatisfied || forcecompile
    # Fall back to building from source, giving the library a different name
    # so that it is not overwritten by BinaryBuilder downloads or vice-versa.
    libname = "libblosc_from_source"
    products = [ LibraryProduct(prefix, [libname], :libblosc) ]
    source_path = joinpath(prefix, "downloads", "src.tar.gz")
    if !isfile(source_path) || !verify(source_path, source_hash; verbose=verbose) || !satisfied(products[1]; verbose=verbose)
        compile(libname, source_url, source_hash, prefix=prefix, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
